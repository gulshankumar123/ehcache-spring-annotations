#summary How to use the @TriggersRemove annotation.

= Using `@TriggersRemove` =

ehcache-spring-annotations includes another annotation - `@TriggersRemove` - which can be applied to methods in order to trigger removal of a single element from the cache or optionally trigger removal of all objects from the cache.

= removeAll Example =

The first example will demonstrate the removeAll option, which is *not* enabled by default.

Consider the same example referred to on UsingCacheAnnotations:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

We can add a method to this class that triggers invocation of [http://ehcache.org/apidocs/net/sf/ehcache/Ehcache.html#removeAll() Ehcache#removeAll()] each time it is executed:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    @TriggersRemove(cacheName="weatherCache", removeAll=true)
    public void clearWeatherCache();
}
}}}


= Example =

Consider the same example referred to on UsingCacheAnnotations:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

Say we want to add an update method to this class:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    public Weather updateWeather(String zipCode, Weather newWeather);

}
}}}

Simply adding `@TriggersRemove(cacheName="weatherCache")` to the updateWeather function as defined above won't work. The default CacheKeyGenerator uses the [http://aopalliance.sourceforge.net/doc/org/aopalliance/intercept/MethodInvocation.html MethodInvocation] - which includes the method arguments and method name. 

In order to use `@TriggersRemove`, you have to align the CacheKeyGenerator used in the `@Cacheable` 

Example:
{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache", keyGeneratorName="myKeyGenerator")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    @TriggersRemove(cacheName="weatherCache", keyGeneratorName="myKeyGenerator")
    public Weather updateWeather(String zipCode, Weather newWeather);

}
}}}