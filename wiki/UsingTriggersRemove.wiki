#summary How to use the @TriggersRemove annotation.
#labels Featured

= Using `@TriggersRemove` =

ehcache-spring-annotations includes another annotation - `@TriggersRemove` - which can be applied to methods in order to trigger removal of a single element from the cache or optionally trigger removal of all objects from the cache.

= removeAll Example  =

The first example will demonstrate the removeAll option, which is *not* enabled by default. 

Consider the original example from UsingCacheAnnotations:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

We can add a method to this class that triggers invocation of [http://ehcache.org/apidocs/net/sf/ehcache/Ehcache.html#removeAll() Ehcache#removeAll()] each time it is executed:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    @TriggersRemove(cacheName="weatherCache", removeAll=true)
    public void clearWeatherCache();
}
}}}

The clearWeatherCache method doesn't have to have a single line of code. Upon invocation, all Elements inside the Ehcache named "weatherCache" will be removed. This example is sometimes useful in conjunction with a trigger for periodic execution.

= Default Example =

In the preceding example, the removeAll option is enabled and all Elements from the cache are removed.

The default behavior of the `@TriggersRemove` will only remove one Element upon invocation.

Consider our example again:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

Say we want to add an delete method to this class. It will contain some logic to remove the Weather object from persistence.
Ideally, we'd like to use `@TriggersRemove` on this new delete method to remove the corresponding element from the cache automatically upon invocation:

{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    public Weather deleteWeather(String zipCode);
}
}}}

Simply adding `@TriggersRemove(cacheName="weatherCache")` to the deleteWeather function as defined above won't work. 
The [CacheKeyGenerators CacheKeyGenerator] interface accepts the [http://aopalliance.sourceforge.net/doc/org/aopalliance/intercept/MethodInvocation.html MethodInvocation] as it's sole argument - which by default includes the method arguments *and* method name. 
If we want invocation of the deleteWeather method to remove the same element out of the cache that was stored by getWeather, we need to make sure that the invocation of the deleteWeather and getWeather method results in the same calculated cache key.

In general terms, you have to configure an appropriate [CacheKeyGenerators CacheKeyGenerator] such that the cache keys generated by your `@Cacheable` method will match to the cache keys generated by your `@TriggersRemove` method.

Example:
{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache", keyGeneratorName="myKeyGenerator")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);

    @TriggersRemove(cacheName="weatherCache", keyGeneratorName="myKeyGenerator")
    public Weather updateWeather(String zipCode, Weather newWeather);
}
}}}

Elsewhere in your Spring configuration you will configure a [CacheKeyGenerators CacheKeyGenerator]  named 'myKeyGenerator':
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.0.xsd">

    <ehcache:annotation-driven cache-manager="ehCacheManager" />
    
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
    
    <bean id="weatherDao" class="x.y.service.DefaultWeatherDao"/>

    <bean id="myKeyGenerator" class="com.googlecode.ehcache.annotations.key.HashCodeCacheKeyGenerator">
        <property name="includeMethod" value="false"/>
    </bean>
</beans>
}}}

With the includeMethod property set to false on a `HashCodeCacheKeyGenerator` instance, the method name will be ignored when generating cache Element keys. This instance will only use the method arguments. In this case, the getWeather and deleteWeather methods have the same type and number of arguments (a single String). 