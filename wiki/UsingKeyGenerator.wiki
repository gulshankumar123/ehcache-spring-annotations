#summary Using the @KeyGenerator for in-line key generation configuration

= Using @!KeyGenerator =

[UsingCacheable @Cacheable] and [UsingTriggersRemove @TriggersRemove] annotations support a `keyGenerator` property. This allows for the inline configuration of a [http://ehcache-spring-annotations.googlecode.com/svn/site/current/apidocs/com/googlecode/ehcache/annotations/key/CacheKeyGenerator.html CacheKeyGenerator]. This approach is recommended over the `keyGeneratorName` annotation as more of the caching configuration is inline in the class.

Example inline key generator configuration:
{{{
@KeyGenerator (
    name = "ListCacheKeyGenerator",
    properties = {
            @Property( name="useReflection", value="true" ),
            @Property( name="checkforCycles", value="true" ),
            @Property( name="includeMethod", value="false" )
    }
)
}}}

== Properties ==
|| *Property* || *Type* || *Description* ||
|| name || String || The name of the !CacheKeyGenerator class. If no package is specified the [http://ehcache-spring-annotations.googlecode.com/svn/site/current/apidocs/com/googlecode/ehcache/annotations/key/package-summary.html com.googlecode.ehcache.annotations.key] package is assumed. ||
|| properties || List<[http://ehcache-spring-annotations.googlecode.com/svn/site/1.1.0-RC1/apidocs/com/googlecode/ehcache/annotations/Property.html @Property]> || A list of properties to set on the key generator. ||