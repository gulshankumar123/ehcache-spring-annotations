#summary Fast and simple key generator
#sidebar TableOfContents

|| *JavaDoc* || [http://ehcache-spring-annotations.googlecode.com/svn/site/current/apidocs/com/googlecode/ehcache/annotations/key/HashCodeCacheKeyGenerator.html HashCodeCacheKeyGenerator] ||
|| *Default Name* || [http://ehcache-spring-annotations.googlecode.com/svn/site/current/apidocs/com/googlecode/ehcache/annotations/key/HashCodeCacheKeyGenerator.html#DEFAULT_BEAN_NAME HashCodeCacheKeyGenerator.DEFAULT_BEAN_NAME] ||

Generates a simple 64bit hash code based on the method arguments. The hash code generation algorithm is very close to [http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html#deepHashCode(java.lang.Object%5B%5D) Arrays.deepHashCode] with the only major differences being the use of a long instead of an int and that Collections and Maps are recursed on the same way deepHashCode recurses on arrays.

==== Special Object Handling ====
 * *Class* - Uses the hashCode of [http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Class.html#getName() Class.getName()] since Class just uses the Object identity hashCode.
 * *Enum* 

 * This key generated depends on all of the method arguments correctly implementing the hashCode method. The only exception is for arrays, Collections and Maps as these are handled element by element.
 * This is the fastest provided key generator.
 * With only 64 bits of key space there some potential for key collisions, especially since the Java hash code implementation is not a cryptographic hash code.
 * Keys generated should be consistent across JVM restarts or between JVM instances as long as all objects used as method arguments correctly implement hashCode. Special handling is provided for Class and Enum type objects.
 * This key generator is automatically registered in the Spring application context using the default constructor under the [http://ehcache-spring-annotations.googlecode.com/svn/site/current/apidocs/com/googlecode/ehcache/annotations/key/HashCodeCacheKeyGenerator.html#DEFAULT_BEAN_NAME HashCodeCacheKeyGenerator.DEFAULT_BEAN_NAME] constant.

The key `-78777307802699` would be generated for the following example call with the default options:
{{{
dao.getWeather("49931");
}}}

Example dao:
{{{
class WeatherDao {
    @Cacheable(cacheName="", keyGeneratorName=HashCodeCacheKeyGenerator.DEFAULT_BEAN_NAME)
    Weather getWeather(String zip) {
        ...
    }
}
}}}