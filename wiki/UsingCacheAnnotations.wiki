=Using `@Cacheable`=

Declaring cache semantics directly in the Java source code puts the declarations much closer to the affected code. There is not much danger of undue coupling, because code that is meant to have its results cached is almost always deployed that way anyway.

The ease-of-use afforded by the use of the `@Cacheable` annotation is best illustrated with an example, which is explained in the text that follows. Consider the following class definition:
{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

When the above POJO is defined as a bean in a Spring IoC container, the bean instance can be made transactional by adding merely one line of XML configuration:
{{{
<!-- from the file 'context.xml' -->
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.0.xsd">

    <ehcache:config cache-manager="ehCacheManager" />
    
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
    
    <bean id="weatherDao" class="x.y.service.DefaultWeatherDao"/>
</beans>
}}}

===!CacheManager Reference===
You can omit the `cache-manager` attribute in the `<ehcache:config/>` tag if the bean name of the `CacheManager` that you want to wire in has the name `cacheManager`. If the `CacheManager` bean that you want to dependency-inject has any other name, then you have to use the `cache-manager` attribute explicitly, as in the preceding example.

===Annotation Placement===
You can place the `@Cacheable` annotation on a method on an interface, or a public method on a class. However, the mere presence of the `@Cacheable` annotation is not enough to activate the caching behavior. The `@Cacheable` annotation is simply metadata that can be consumed by some runtime infrastructure that is `@Cacheable`-aware and that can use the metadata to configure the appropriate beans with caching behavior. In the preceding example, the `<ehcache:config/>` element switches on the caching behavior.

Spring recommends that you only annotate methods of concrete classes with the `@Cacheable` annotation, as opposed to annotating methods of interfaces. You certainly can place the `@Cacheable` annotation on an interface (or an interface method), but this works only as you would expect it to if you are using interface-based proxies. The fact that Java annotations are not inherited from interfaces  means that if you are using class-based proxies (proxy-target-class="true") then the transaction settings are not recognized by the proxying and weaving infrastructure, and the object will not be wrapped in a caching proxy, which would be decidedly bad.

===Method visibility and `@Cacheable`===
When using proxies, you should apply the `@Cacheable` annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the `@Cacheable` annotation, no error is raised, but the annotated method does not exhibit the configured cachable settings.

===Self-Invocation===
Only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual cache interception at runtime even if the invoked method is marked with `@Cacheable`.


===Table 1. `<ehcache:config/>`  settings===
|| *Attribute* || *Default* || *Description* ||
|| `cache-manager` || cacheManager || The bean name of the !CacheManager that is to be used to drive caching. This attribute is not required, and only needs to be specified explicitly if the bean name of the desired !CacheManager is not 'cacheManager'. ||
|| `create-missing-caches` || false || Should cache names from `@Cacheable` annotations that don't exist in the !CacheManager be created based on the default cache or should an exception be thrown?||
|| `default-cache-key-generator` || Not Set || Default !CacheKeyGenerator implementation to use. If not specified !HashCodeCacheKeyGenerator will be used as the default. ||
|| `self-populating-cache-scope` || shared || Are the SelfPopulatingCache wrappers scoped to the method or are they shared among all methods using each self populating cache. ||
|| `proxy-target-class` || false || Applies to proxy mode only. Controls what type of caching proxies are created for classes annotated with the `@Cacheable` annotation. If the proxy-target-class attribute is set to true, then class-based proxies are created. If proxy-target-class is false or if the attribute is omitted, then standard JDK interface-based proxies are created. (See [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-proxying Spring Reference Section 7.6, “Proxying mechanisms”] for a detailed examination of the different proxy types.)||
|| `order` || Ordered.LOWEST_PRECEDENCE || Defines the order of the caching advice that is applied to beans annotated with `@Cacheable`. (For more information about the rules related to ordering of AOP advice, see [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-ataspectj-advice-ordering Spring Reference Section 7.2.4.7, “Advice ordering”].) No specified ordering means that the AOP subsystem determines the order of the advice. ||