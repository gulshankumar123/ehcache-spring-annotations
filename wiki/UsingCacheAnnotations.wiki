=Using `@Cacheable`=

Declaring cache semantics directly in the Java source code puts the declarations much closer to the affected code. There is not much danger of undue coupling, because code that is meant to have its results cached is almost always deployed that way anyway.

The ease-of-use afforded by the use of the `@Cacheable` annotation is best illustrated with an example, which is explained in the text that follows. Consider the following class definition:
{{{
public class DefaultWeatherDao implements WeatherDao {
    
    @Cacheable(cacheName="weatherCache")
    public Weather getWeather(String zipCode);
    
    @Cacheable(cacheName="locationSearchCache")
    public List<Location> findLocations(String locationSearch);
}
}}}

When the above POJO is defined as a bean in a Spring IoC container, the bean instance can be made transactional by adding merely one line of XML configuration:
{{{
<!-- from the file 'context.xml' -->
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
     http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.0.xsd">

    <ehcache:config cache-manager="ehCacheManager" />
    
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
    
    <bean id="weatherDao" class="x.y.service.DefaultWeatherDao"/>
</beans>
}}}

===Tip===
You can omit the `cache-manager` attribute in the `<ehcache:config/>` tag if the bean name of the `CacheManager` that you want to wire in has the name `cacheManager`. If the `CacheManager` bean that you want to dependency-inject has any other name, then you have to use the `cache-manager` attribute explicitly, as in the preceding example.

You can place the `@Cacheable` annotation on a method on an interface, or a public method on a class. However, the mere presence of the `@Cacheable` annotation is not enough to activate the caching behavior. The `@Cacheable` annotation is simply metadata that can be consumed by some runtime infrastructure that is `@Cacheable`-aware and that can use the metadata to configure the appropriate beans with caching behavior. In the preceding example, the `<ehcache:config/>` element switches on the caching behavior.

===Method visibility and `@Cacheable`===
When using proxies, you should apply the `@Cacheable` annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the `@Cacheable` annotation, no error is raised, but the annotated method does not exhibit the configured cachable settings.